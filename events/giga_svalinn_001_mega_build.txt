namespace = giga_svalinn_construction

### do stuff ###

# just delays setting the mega flag for the construction site
planet_event = {
	id = giga_svalinn_construction.001
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		solar_system = { giga_has_svalinn_installation = yes}
	}

	immediate = {
		# after checks are done, star now has a megastructure (for now)
		giga_set_has_mega_flag = yes
		# svalinn specifically
		set_planet_flag = has_svalinn_platform_mega
		solar_system = { set_star_flag = has_svalinn_platform_mega }
	}
}

########################################################################################################

# process nearby systems to a svalinn under construction
system_event = {
	id = giga_svalinn_construction.010
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		has_star_flag = has_svalinn_platform_mega
	}

	immediate = {
		save_event_target_as = giga_svalinn_construction_system
		owner = { save_event_target_as = giga_svalinn_construction_owner }
		# save the number of neighbouring systems
		export_trigger_value_to_variable = {
			trigger = count_neighbor_system
			parameters = {
				limit = {
					is_valid_svalinn_bastion_target = yes
				}
			}
			variable = giga_svalinn_num_viable_neighbor_stars
		}
		# set a counter variable for scoping
		set_variable = {
			which = giga_svalinn_current_neighbor_system
			value = 1
		}
		# for every neighbour system, set a variable which makes them checkable later
		every_neighbor_system = {
			limit = {
				is_valid_svalinn_bastion_target = yes
			}
			set_star_flag = giga_svalinn_neighbor_system_to_@ROOT
			set_variable = {
				which = giga_svalinn_neighbor_system_id
				value = event_target:giga_svalinn_construction_system.giga_svalinn_current_neighbor_system
			}
			# +1 to counter
			event_target:giga_svalinn_construction_system = {
				change_variable = {
					which = giga_svalinn_current_neighbor_system
					value = 1
				}
			}
		}
		# release the counter
		clear_variable = giga_svalinn_current_neighbor_system
		event_target:giga_svalinn_construction_owner = { country_event = { id = giga_svalinn_construction.011 } }
	}
}

# .011 split to another file because of massive block of dialog options
# see giga_svalinn_002_mega_build_target_dialog.txt

########################################################################################################

# management system implementation

# spawns reference system with a known angle - 90 degrees is galactic north
system_event = {
	id = giga_svalinn_construction.080
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		has_star_flag = has_svalinn_platform_mega
	}

	immediate = {
		# event targets not preserved, resave them
		save_event_target_as = giga_svalinn_construction_system
		owner = { save_event_target_as = giga_svalinn_construction_owner }
		random_neighbor_system = {
			limit = {
				has_star_flag = giga_svalinn_interstellar_target_system_from_@PREV
			}
			save_event_target_as = giga_svalinn_interstellar_target_system
		}

		# check if already spawned reference system
		if = {
			limit = { NOT = { has_global_flag = giga_svalinn_management_system_spawned } }
			event_target:giga_svalinn_construction_owner.capital_scope.solar_system = {
				# make new system - always galactic north
				spawn_system = {
					min_distance = 5
					max_distance = 5
					min_orientation_angle = 90
					max_orientation_angle = 90
					hyperlane = no
					is_discovered = yes
					initializer = giga_svalinn_interstellar_init
					effect = {
						isolate_system = yes
						set_star_flag = giga_svalinn_interstellar_management_system
						# TODO: change globals to be per country?
						save_global_event_target_as = giga_svalinn_interstellar_management_system
					}
				}
				last_created_system = {
					create_starbase = {
						size = starbase_citadel
						owner = event_target:giga_svalinn_construction_owner
					}
					set_surveyed = { surveyed = yes }
					every_system_planet = { set_surveyed = { surveyed = yes } }
				}
				# TODO: change to bypass
				add_hyperlane = {
					from = event_target:giga_svalinn_construction_owner.capital_scope.solar_system
					to = event_target:giga_svalinn_interstellar_management_system
				}
				set_global_flag = giga_svalinn_management_system_spawned
			}
		}
		
		# next event runs calculation
		system_event = { id = giga_svalinn_construction.081 }
	}
}

# here's a diagram to keep track of things
# yes, I've gone insane
# 
# 				  C
# 				  /\
#				 /  \
#				/    \
#			   /      \
#      	      /		   \ side a
# 	side b   /		    \
#	 	    /			 \
#		   /			  \
#		  A -------------- B
#				side c
#
# A is the construction site, B is the target system, C is galactic north
# yes depending on positions this will become a bizarre triangle that doesn't look like this, but the math is the same
# angle A is the angle to target system from galactic north, so 90 degrees

system_event = {
	id = giga_svalinn_construction.081
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		has_star_flag = has_svalinn_platform_mega
	}

	immediate = {
		set_variable = {
			which = giga_svalinn_triangle_side_a
			value = 1
		}
		set_variable = {
			which = giga_svalinn_triangle_side_b
			value = 1
		}
		set_variable = {
			which = giga_svalinn_triangle_side_c
			value = 1
		}

		# from the construction system
		export_trigger_value_to_variable = {
			trigger = distance
			parameters = {
				# system that forms absolute north
				source = event_target:giga_svalinn_interstellar_management_system
				type = euclidean
			}
			variable = giga_svalinn_triangle_side_b
		}
		export_trigger_value_to_variable = {
			trigger = distance
			parameters = {
				# system that is being targeted
				source = event_target:giga_svalinn_interstellar_target_system
				type = euclidean
			}
			variable = giga_svalinn_triangle_side_c
		}
		# from targeted system
		event_target:giga_svalinn_interstellar_target_system = {
			export_trigger_value_to_variable = {
				trigger = distance
				parameters = {
					# system that forms absolute north
					source = event_target:giga_svalinn_interstellar_management_system
					type = euclidean
				}
				# doesn't want to save directly to correct scope, so middle step it is
				variable = giga_svalinn_triangle_side_a_target_system
			}
		}
		# fetch that variable
		set_variable = {
			which = giga_svalinn_triangle_side_a
			value = event_target:giga_svalinn_interstellar_target_system.giga_svalinn_triangle_side_a_target_system
		}
		# clean up so it doesn't interfere with future svalinns
		event_target:giga_svalinn_interstellar_target_system = { clear_variable = giga_svalinn_triangle_side_a_target_system }

		# call another event
		system_event = { id = giga_svalinn_construction.082 }
	}
}

system_event = {
	id = giga_svalinn_construction.082
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		has_star_flag = has_svalinn_platform_mega
	}

	immediate = {
		set_variable = {
			which = giga_svalinn_triangle_angle_A_radian
			# this is a rabbithole and a half of a script value...
			value = value:giga_calculate_angle_A
		}
		set_variable = {
			which = giga_svalinn_triangle_angle_A_degrees
			value = value:giga_radian_to_degrees|VAL|giga_calculate_angle_A|
		}
		# account for north being at 90 degrees and not 0 for spawn system
		# (it looks better to have reference system north)
		#change_variable = {
		#	which = giga_svalinn_triangle_angle_A_degrees
		#	value = -90
		#}
	}
}

########################################################################################################

# ship implementation
#system_event = {
#	id = giga_svalinn_construction.090
#	is_triggered_only = yes
#	hide_window = yes
#
#	trigger = {
#		has_star_flag = has_svalinn_platform_mega
#	}
#
#	immediate = {
#		# event targets not preserved, resave them
#		save_event_target_as = giga_svalinn_construction_system
#		owner = { save_event_target_as = giga_svalinn_construction_owner }
#		random_neighbor_system = {
#			limit = {
#				has_star_flag = giga_svalinn_interstellar_target_system
#			}
#			save_event_target_as = giga_svalinn_interstellar_target_system
#		}
#		create_fleet = {
#			name = "NAME_svalinn_system_angle_measure"
#			effect = {
#				set_fleet_flag = giga_svalinn_hyperlane_traveller
#				set_owner = event_target:giga_svalinn_construction_owner
#				create_ship_design = {
#					design = "NAME_svalinn_system_angle_measure"
#				}
#				create_ship = {
#					name = "NAME_svalinn_hyperlane_traveller"
#					design = last_created_design
#				}
#				set_location = {
#					target = event_target:giga_svalinn_interstellar_target_system
#					distance = 1
#					angle = 0
#				}
#			}
#		}
#		last_created_fleet = {
#			set_fleet_stance = passive
#			set_aggro_range_measure_from = return_point
#			set_aggro_range = 0
#			clear_orders = yes
#			clear_fleet_actions = this
#			queue_actions = {
#				move_to = event_target:giga_svalinn_construction_system
#			}
#		}
#	}
#}
#
### on_entering_system_fleet
## Scope = Fleet
## From = System
#fleet_event = {
#	id = giga_svalinn_construction.091
#	is_triggered_only = yes
#	hide_window = yes
#
#	trigger = {
#		has_fleet_flag = giga_svalinn_hyperlane_traveller
#		from = { has_star_flag = has_svalinn_platform_mega }
#	}
#
#	immediate = {
#		create_ambient_object = {
#			type = giga_svalinn_system_angle_measure_object
#			location = this
#		}
#		last_created_ambient_object = {
#			set_ambient_object_flag = giga_svalinn_hyperlane_entry
#			save_event_target_as = giga_svalinn_hyperlane_entry
#		}
#		from = { system_event = { id = giga_svalinn_construction.092 } }
#		delete_fleet = this
#	}
#}
#
## creates static ambient objects for measuring purposes
#system_event = {
#	id = giga_svalinn_construction.092
#	is_triggered_only = yes
#	hide_window = yes
#
#	trigger = {
#		has_star_flag = has_svalinn_platform_mega
#	}
#
#	immediate = {
#		# event targets not preserved, resave them
#		save_event_target_as = giga_svalinn_construction_system
#		owner = { save_event_target_as = giga_svalinn_construction_owner }
#		random_neighbor_system = {
#			limit = {
#				has_star_flag = giga_svalinn_interstellar_target_system
#			}
#			save_event_target_as = giga_svalinn_interstellar_target_system
#		}
#
#		# north
#		create_ambient_object = {
#			type = giga_svalinn_system_angle_measure_object
#		}
#		last_created_ambient_object = {
#			set_ambient_object_flag = giga_svalinn_system_north
#			save_event_target_as = giga_svalinn_system_north
#			set_location = {
#				target = star
#				distance = 200
#				angle = 90
#			}
#		}
#
#		# west
#		create_ambient_object = {
#			type = giga_svalinn_system_angle_measure_object
#		}
#		last_created_ambient_object = {
#			set_ambient_object_flag = giga_svalinn_system_west
#			save_event_target_as = giga_svalinn_system_west
#			set_location = {
#				target = star
#				distance = 200
#				angle = 180
#			}
#		}
#		system_event = { id = giga_svalinn_construction.093 }
#	}
#}
#
#system_event = {
#	id = giga_svalinn_construction.093
#	is_triggered_only = yes
#	hide_window = yes
#
#	trigger = {
#		has_star_flag = has_svalinn_platform_mega
#	}
#
#	immediate = {
#		set_variable = {
#			which = giga_svalinn_triangle_side_a
#			value = 1
#		}
#		set_variable = {
#			which = giga_svalinn_triangle_side_b
#			value = 1
#		}
#		set_variable = {
#			which = giga_svalinn_triangle_side_c
#			value = 1
#		}
#
#		event_target:giga_svalinn_system_north = {
#			export_trigger_value_to_variable = {
#				trigger = distance
#				parameters = {
#					source = event_target:giga_svalinn_hyperlane_entry
#					type = euclidean
#					same_solar_system = yes
#				}
#				variable = event_target:giga_svalinn_construction_system.giga_svalinn_triangle_side_a
#			}
#			export_trigger_value_to_variable = {
#				trigger = distance
#				parameters = {
#					source = event_target:giga_svalinn_system_west
#					type = euclidean
#					same_solar_system = yes
#				}
#				variable = event_target:giga_svalinn_construction_system.giga_svalinn_triangle_side_b
#			}
#		}
#		event_target:giga_svalinn_system_west = {
#			export_trigger_value_to_variable = {
#				trigger = distance
#				parameters = {
#					source = event_target:giga_svalinn_hyperlane_entry
#					type = euclidean
#					same_solar_system = yes
#				}
#				variable = event_target:giga_svalinn_construction_system.giga_svalinn_triangle_side_c
#			}
#		}
#	}
#
#}
########################################################################################################

# spawns system
## call from system with svalinn construction
system_event = {
	id = giga_svalinn_construction.100
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		has_star_flag = has_svalinn_platform_mega
	}

	immediate = {
		# event targets not preserved, resave them
		save_event_target_as = giga_svalinn_construction_system
		owner = { save_event_target_as = giga_svalinn_construction_owner }
		random_neighbor_system = {
			limit = {
				has_star_flag = giga_svalinn_interstellar_target_system_from_@ROOT
			}
			save_event_target_as = giga_svalinn_interstellar_target_system
		}

		# effect that spawns the new system
		giga_svalinn_spawn_halfway_system = {
			construction_owner = giga_svalinn_construction_owner
			giga_system_x = giga_svalinn_construction_system
			giga_system_y = giga_svalinn_interstellar_target_system
			calculated_angle_variable = giga_svalinn_triangle_angle_A_degrees
		}

	}
}


# effect solar_system = { spawn_system = { min_distance = 180 max_distance = 180 min_orientation_angle = 180 max_orientation_angle = 180 is_discovered = yes initializer = giga_svalinn_interstellar_init } }
